public interface ParserConstants
{
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL    = 36;
    int FIRST_SEMANTIC_ACTION = 71;

    int[][] PARSER_TABLE =
            {
                    { -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1,  3,  2, -1, -1, -1, -1,  2,  2,  2,  2, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1,  5, -1, -1, -1, -1,  5,  5,  5,  5, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  8, -1, -1 },
                    { -1, -1, -1, -1, 11, -1, -1, -1, -1,  9, 10, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, -1, -1, 40, -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, 40, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, 22 },
                    { -1, -1, -1, -1, -1, -1, -1, 25, 25, -1, -1, -1, -1, -1, -1, 25, 25, 25, 25, -1, -1, 25, -1, -1, -1, -1, 25, 25, -1, -1, -1, -1, -1, 25, -1 },
                    { -1, -1, -1, -1, 29, -1, -1, -1, -1, 29, 29, 29, 29, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, 33, -1, 34, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, 35, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, 46, 45, -1, -1, -1, -1, -1, -1, 44, 44, 44, 44, -1, -1, 47, -1, -1, -1, -1, 44, 44, -1, -1, -1, -1, -1, 44, -1 },
                    { -1, -1, -1, -1, 41, -1, -1, -1, -1, 41, 41, 41, 41, -1, -1, 41, -1, -1, -1, 42, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, 41, -1, -1, 41 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, 48, 48, -1, -1, -1, -1, -1, 48, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 55, 55, 55, -1, -1, -1, -1, -1, -1, -1, 55, 55, -1, -1, -1, -1, -1, 55, -1 },
                    { -1, -1, -1, -1, 49, -1, -1, -1, -1, 49, 49, 49, 49, -1, -1, 49, -1, -1, -1, 49, 49, -1, 50, 50, 50, 50, -1, -1, -1, -1, 49, 49, -1, -1, 49 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 52, 53, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1, -1, -1, -1, 59, -1 },
                    { -1, -1, -1, -1, 56, -1, -1, -1, -1, 56, 56, 56, 56, -1, -1, 56, -1, -1, -1, 56, 56, -1, 56, 56, 56, 56, 57, 58, -1, -1, 56, 56, -1, -1, 56 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 64, 65, 66, -1, -1, -1, -1, -1, -1, -1, 68, 69, -1, -1, -1, -1, -1, 67, -1 },
                    { -1, -1, -1, -1, 60, -1, -1, -1, -1, 60, 60, 60, 60, -1, -1, 60, -1, -1, -1, 60, 60, -1, 60, 60, 60, 60, 60, 60, 61, 62, 60, 60, -1, -1, 60 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 15, 15, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, 27 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, 32, 31, 32, 32, -1, -1, 31, 31, 31, 31, 32, 32, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
            };

    int[][] PRODUCTIONS =
            {
                    { 171,   3,  37,   4, 172 },
                    {  39,  32,  38 },
                    {  37 },
                    {   0 },
                    {  43 },
                    {  41 },
                    {  42,  40 },
                    { 173 },
                    {  33,  49, 174 },
                    {  45 },
                    {  46 },
                    {  47 },
                    {  48 },
                    {  16, 175,  67 },
                    {  31,  16, 175,  67 },
                    {   0 },
                    {  42,  33,  49, 174 },
                    {  10,  34,  50,  35 },
                    {  51, 176,  52 },
                    {  16 },
                    {  19, 177,  31,  16 },
                    {  31,  51, 176,  52 },
                    {   0 },
                    {  11,  34,  53,  35 },
                    {  12,  34,  53,  35, 178 },
                    {  49, 179,  68 },
                    {  31,  49, 179,  68 },
                    {   0 },
                    {   5,  49, 180,  54,  55, 181,  56, 182,   4 },
                    {  41,  32,  70 },
                    {  44,  32,  70 },
                    {  54 },
                    {   0 },
                    {   0 },
                    { 181,   6,  49, 183,  54,  55 },
                    {   0 },
                    {   7,  54 },
                    { 184,  13,  54,  69 },
                    {  15,  49, 185 },
                    {  14,  49, 186 },
                    {  57,  58 },
                    {   0 },
                    {  20,  57, 187,  58 },
                    {  21,  57, 188,  58 },
                    {  59 },
                    {   9, 189 },
                    {   8, 190 },
                    {  22,  57, 191 },
                    {  60,  61 },
                    {   0 },
                    {  62, 192,  60, 193 },
                    {  23 },
                    {  24 },
                    {  25 },
                    {  26 },
                    {  63,  64 },
                    {   0 },
                    {  27,  63, 194,  64 },
                    {  28,  63, 195,  64 },
                    {  65,  66 },
                    {   0 },
                    {  29,  65, 196,  66 },
                    {  30,  65, 197,  66 },
                    {  16, 198 },
                    {  17, 199 },
                    {  18, 200 },
                    {  19, 201 },
                    {  34,  49,  35 },
                    {  27,  65 },
                    {  28,  65, 202 }
            };

    String[] PARSER_ERROR =
            {
                    "",
                    "esperado   EOF", //"esperado fim de programa",
                    "esperado   PR",
                    "esperado   main",
                    "esperado   end",
                    "esperado   if",
                    "esperado   elif",
                    "esperado   else",
                    "esperado   false",
                    "esperado   true",
                    "esperado   read",
                    "esperado   write",
                    "esperado   writeln",
                    "esperado   repeat",
                    "esperado   until",
                    "esperado   while",
                    "esperado   identificador", //"esperado id",
                    "esperado   constante_int", //"esperado cte_int",
                    "esperado   constante_float", //"esperado cte_float",
                    "esperado   constante_string", //"esperado cte_string",
                    "esperado   &&", //"esperado \"&&\""
                    "esperado   ||", //"esperado \"||\""
                    "esperado   !", //"esperado \"!\""
                    "esperado   ==", //"esperado \"==\""
                    "esperado   !=", //"esperado \"!=\""
                    "esperado   <", //"esperado \"<\""
                    "esperado   >", //"esperado \">\""
                    "esperado   +", //"esperado \"+\""
                    "esperado   -", //"esperado \"-\""
                    "esperado   ", //"esperado \"\""
                    "esperado   /", //"esperado \"/\""
                    "esperado   ,", //"esperado \",\""
                    "esperado   ;", //"esperado \";\""
                    "esperado   =", //"esperado \"=\""
                    "esperado   (", //"esperado \"(\""
                    "esperado   )", //"esperado \")\""
                    "esperado   main", //"<programa> inválido",
                    "esperado   if  read  write  writeln  repeat  identificador", //""<lista_instrucoes> inválido",
                    "esperado   end  if  read  write  writeln  repeat  identificador", //""<lista_instrucoes_complemento> inválido",
                    "esperado   if  read  write  writeln  repeat  identificador", //""<instrucao> inválido",
                    "esperado   ;   = ", //""<termino_instrucao> inválido",
                    "esperado   if  read  write  writeln  repeat", //""<comando_sem_atribuicao> inválido",
                    "esperado   identificador", //""<lista_id> inválido",
                    "esperado   identificador", //""<lista_id_ou_atribuicao> inválido",
                    "esperado   identificador", //""<atribuicao> inválido",
                    "esperado   read", //""<entrada_dados> inválido",
                    "esperado   write  writeln", //""<saida_dados> inválido",
                    "esperado   if", //""<selecao> inválido",
                    "esperado   repeat", //""<repeticao> inválido",
                    "esperado   expressao", //""<expressao> inválido",
                    "esperado   identificador  cte_string", //""<lista_entrada> inválido",
                    "esperado   identificador  cte_string", //""<lista_entrada_unica> inválido",
                    "esperado   ,   )", // "<lista_entrada_complemento> inválido",
                    "esperado   expressao", //""<lista_expressoes> inválido",
                    "esperado   if  write  writeln  read  repeat  identificador", //""<lista_comandos> inválido",
                    "esperado   end  elif  else", //"<elif> inválido",
                    "esperado   end  else", //"<else> inválido",
                    "esperado   expressao", //"<elemento> inválido",
                    "esperado   expressao", //"<expressao1> inválido",
                    "esperado   expressao", //"<relacional> inválido",
                    "esperado   expressao", //"<aritmetica> inválido",
                    "esperado   expressao", //"<relacional1> inválido",
                    "esperado   ==  !=  <  >", //"<operador_relacional> inválido",
                    "esperado   expressao", //"<termo> inválido",
                    "esperado   expressao", //"<aritmetica1> inválido",
                    "esperado   expressao", //"<fator> inválido",
                    "esperado   expressao", //"<termo1> inválido",
                    "esperado   ,  ;  =", //"<lista_id_complemento> inválido",
                    "esperado   ,  )", //"<lista_expressao_complemento> inválido",
                    "esperado   until  while", //"<repeticao_tipo> inválido",
                    "esperado   end  if  elif  else  read  write  writeln  repeat  until  while  identificador", //"<comandos_complementos> inválido"
            };
}
